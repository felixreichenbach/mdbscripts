name=mongo-sink
connector.class=com.mongodb.kafka.connect.MongoSinkConnector
tasks.max=1
topics=low.demo.source

# Specific global MongoDB Sink Connector configuration
connection.uri=mongodb+srv://demo:<password>@host.mongodb.net/test?retryWrites=true&w=majority
database=demo
collection=sink

max.num.retries=3
retries.defer.timeout=5000
max.batch.size = 0
rate.limiting.timeout=0
rate.limiting.every.n=0

# Write configuration
delete.on.null.values=false

# Generate an _id field
document.id.strategy=com.mongodb.kafka.connect.sink.processor.id.strategy.BsonOidStrategy

# Document manipulation settings
key.converter=org.apache.kafka.connect.json.JsonConverter
key.converter.schemas.enable=false
#key.projection.type=none
#key.projection.list=

value.converter=org.apache.kafka.connect.json.JsonConverter
value.converter.schemas.enable=false
value.projection.type=whitelist
value.projection.list=fullDocument.name,fullDocument,firstname

field.renamer.mapping= [{"oldName":"value.fullDocument.name","newName":"firstname"}]
field.renamer.regex=[]

# Post processor chain
post.processor.chain=com.mongodb.kafka.connect.sink.processor.WhitelistValueProjector,com.mongodb.kafka.connect.sink.processor.field.renaming.RenameByMapping

# Writemodel strategy will allow to specify custom write strategies
# Write timestamps into the target document (as we use BsonIdStrategy, there won't be updates)
writemodel.strategy=com.mongodb.kafka.connect.sink.writemodel.strategy.UpdateOneTimestampsStrategy
